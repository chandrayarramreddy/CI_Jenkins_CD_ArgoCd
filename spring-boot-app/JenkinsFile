pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        //sh 'cd CI_Jenkins_CD_ArgoCd/spring-boot-app && mvn clean package'  //when using this code @tmp folder is created and failing job to find the folders
        dir('spring-boot-app') {         // removed CI_Jenkins_CD_ArgoCd/  as it is creating issue when checking pom.xml
        // Run your build commands here
         sh 'mvn clean package'
        }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.1.9:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "chandray/cicdargocd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "CI_Jenkins_CD_ArgoCd/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "CI_Jenkins_CD_ArgoCd"
            GIT_USER_NAME = "chandrayarramreddy"
        }
        steps {
            script {
              sh '''
                    git config --global user.email "chandra.y@gmail.com"
                    git config --global user.name "Chandra Y"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    #sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                    sed -E "s/(:)[0-9]+/\1${BUILD_NUMBER}/" spring-boot-app-manifests/deployment.yml
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                '''
            withCredentials([gitUsernamePassword(credentialsId: 'github1', gitToolName: 'Default')])  {
               sh" git push https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main"
            }
        }
      }
    }
  }
}
